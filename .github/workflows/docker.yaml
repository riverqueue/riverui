name: Docker

on:
  push:
    branches:
      - "master"
    tags:
      - "v*"
  pull_request:
    branches:
      - "master"
  workflow_dispatch:
    inputs:
      ref:
        description: "Tag to build (e.g. v0.1.0)"
        required: true

env:
  IMAGE_NAME: ${{ github.repository }}
  REGISTRY: ghcr.io

jobs:
  build-riverui:
    name: "Build image: riverui"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        docker_platform:
          - linux/amd64
          - linux/arm64
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
    permissions:
      attestations: write
      contents: read
      id-token: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: Prepare
        run: |
          platform=${{ matrix.docker_platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.source=https://github.com/riverqueue/riverui
            org.opencontainers.image.description="River UI is a web-based user interface for River, a fast and reliable background job system."
            org.opencontainers.image.licenses=MPL-2.0
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: Build and push to GitHub Container Registry
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          pull: true
          platforms: ${{ matrix.docker_platform }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache,mode=max
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true,annotation-index.org.opencontainers.image.description=River UI

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          push-to-registry: true
          subject-digest: ${{ steps.build.outputs.digest }}
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-oss-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  build-riverproui:
    name: "Build image: riverproui"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        docker_platform:
          - linux/amd64
          - linux/arm64
    permissions:
      contents: read
      id-token: write
    env:
      ECR_CACHE_AWS_REGION: "us-east-2"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ECR_CACHE_ROLE_ARN }}
          aws-region: ${{ env.ECR_CACHE_AWS_REGION }}
          role-session-name: GitHubActions

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.ECR_CACHE_AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_CACHE_AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.ECR_CACHE_AWS_REGION }}.amazonaws.com

      - name: Prepare
        run: |
          platform=${{ matrix.docker_platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Set TAG
        run: echo "TAG=${{ inputs.ref || github.ref_name }}" >> $GITHUB_ENV

      - name: Validate TAG
        if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
        run: |
          if [[ ! "$TAG" == v* ]]; then
            echo "Tag must start with 'v'"
            exit 1
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export to OCI
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.pro
          pull: true
          platforms: ${{ matrix.docker_platform }}
          cache-from: type=registry,ref=${{ secrets.ECR_CACHE_AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.ECR_CACHE_AWS_REGION }}.amazonaws.com/riverqueue/riverproui:cache-${{ env.PLATFORM_PAIR }}
          cache-to: type=registry,mode=max,image-manifest=true,oci-mediatypes=true,ref=${{ secrets.ECR_CACHE_AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.ECR_CACHE_AWS_REGION }}.amazonaws.com/riverqueue/riverproui:cache-${{ env.PLATFORM_PAIR }}
          outputs: type=oci,dest=/tmp/oci-${{ env.PLATFORM_PAIR }},tar=false,oci-mediatypes=true
          provenance: false
          secrets: |
            "riverpro_credential=${{ secrets.RIVERPRO_GO_MOD_CREDENTIAL }}"

      - name: Upload OCI artifact
        uses: actions/upload-artifact@v4
        with:
          name: pro-oci-${{ env.PLATFORM_PAIR }}
          path: /tmp/oci-${{ env.PLATFORM_PAIR }}
          retention-days: 1

  merge-riverui:
    name: "Merge manifests: riverui"
    runs-on: ubuntu-latest
    needs:
      - build-riverui
    permissions:
      contents: read
      packages: write

    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-oss-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.source=https://github.com/riverqueue/riverui
            org.opencontainers.image.description="River UI is a web-based user interface for River, a fast and reliable background job system."
            org.opencontainers.image.licenses=MPL-2.0
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create \
            --annotation "index:org.opencontainers.image.source=https://github.com/riverqueue/riverui" \
            --annotation "index:org.opencontainers.image.description=River UI is a web-based user interface for River, a fast and reliable background job system." \
            --annotation "index:org.opencontainers.image.licenses=MPL-2.0" \
            $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

  merge-riverproui:
    name: "Merge manifests: riverproui"
    runs-on: ubuntu-latest
    needs:
      - build-riverproui
    outputs:
      tags: ${{ steps.meta-pro.outputs.tags }}
    permissions:
      attestations: write
      contents: read
      id-token: write

    steps:
      - name: Download OCI artifacts
        uses: actions/download-artifact@v4
        with:
          path: /tmp/oci-parts
          pattern: pro-oci-*

      - name: Docker meta for Pro
        id: meta-pro
        uses: docker/metadata-action@v5
        with:
          images: riverqueue.com/riverproui
          labels: |
            org.opencontainers.image.source=https://github.com/riverqueue/riverui
            org.opencontainers.image.description="River UI Pro is a web-based user interface for River, with pro features."
            org.opencontainers.image.licenses=MPL-2.0
          # TODO: type=ref are temporary for testing
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: Merge OCI layouts
        id: merge
        run: |
          mkdir -p /tmp/oci/blobs/sha256
          for platform in linux-amd64 linux-arm64; do
            cp -r /tmp/oci-parts/pro-oci-$platform/blobs/sha256/* /tmp/oci/blobs/sha256/ || true
            cp /tmp/oci-parts/pro-oci-$platform/oci-layout /tmp/oci/ || true
          done
          jq -s '.[0] as $first | $first * {manifests: ($first.manifests + .[1].manifests)}' \
            /tmp/oci-parts/pro-oci-linux-amd64/index.json /tmp/oci-parts/pro-oci-linux-arm64/index.json > /tmp/oci/index.json
          digest=$(sha256sum /tmp/oci/index.json | cut -d' ' -f1)
          echo "digest=sha256:$digest" >> $GITHUB_OUTPUT

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          push-to-registry: false
          subject-digest: ${{ steps.merge.outputs.digest }}
          subject-name: riverqueue.com/riverproui

      - name: Upload OCI artifact
        uses: actions/upload-artifact@v4
        with:
          name: pro-oci
          path: /tmp/oci
          retention-days: 1

  publish-riverproui:
    name: "Publish Docker image: riverproui"
    runs-on: ubuntu-latest
    needs:
      - merge-riverproui

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: Download OCI artifact
        uses: actions/download-artifact@v4
        with:
          name: pro-oci
          path: /tmp/oci

      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2
          verbose: false
          arch: amd64

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.R2_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.R2_SECRET_ACCESS_KEY }}
          aws configure set default.region auto

      - name: Sync blobs to R2
        # TODO: temporary for testing
        # if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
        env:
          DOCKER_RELEASE_STORAGE_BUCKET: ${{ vars.DOCKER_RELEASE_STORAGE_BUCKET }}
          REPO_NAME: riverproui
          ENDPOINT_URL: ${{ secrets.R2_DOCKER_RELEASES_ENDPOINT_URL }}
        run: |
          aws s3 cp /tmp/oci/blobs/sha256/ s3://$DOCKER_RELEASE_STORAGE_BUCKET/$REPO_NAME/blobs/sha256/ --recursive --endpoint-url $ENDPOINT_URL

      - name: Upload manifest by digest
        # TODO: temporary for testing
        # if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
        env:
          DOCKER_RELEASE_STORAGE_BUCKET: ${{ vars.DOCKER_RELEASE_STORAGE_BUCKET }}
          REPO_NAME: riverproui
          ENDPOINT_URL: ${{ secrets.R2_DOCKER_RELEASES_ENDPOINT_URL }}
        run: |
          MANIFEST_DIGEST=$(sha256sum /tmp/oci/index.json | awk '{print $1}')
          aws s3 cp /tmp/oci/index.json s3://$DOCKER_RELEASE_STORAGE_BUCKET/$REPO_NAME/manifests/sha256:$MANIFEST_DIGEST --content-type "application/vnd.docker.distribution.manifest.list.v2+json" --endpoint-url $ENDPOINT_URL

      - name: Upload tagged manifests
        # TODO: temporary for testing
        # if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
        env:
          DOCKER_RELEASE_STORAGE_BUCKET: ${{ vars.DOCKER_RELEASE_STORAGE_BUCKET }}
          REPO_NAME: riverproui
          ENDPOINT_URL: ${{ secrets.R2_DOCKER_RELEASES_ENDPOINT_URL }}
        run: |
          # Extract tags from the merge job output (newline-separated)
          echo '${{ needs.merge-riverproui.outputs.tags }}' > tags.txt
          while IFS= read -r TAG; do
            if [ -n "$TAG" ]; then
              SHORT_TAG="${TAG#riverqueue.com/riverproui:}"
              aws s3 cp /tmp/oci/index.json s3://$DOCKER_RELEASE_STORAGE_BUCKET/$REPO_NAME/manifests/$SHORT_TAG --content-type "application/vnd.docker.distribution.manifest.list.v2+json" --endpoint-url $ENDPOINT_URL
            fi
          done < tags.txt
