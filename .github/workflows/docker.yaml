name: Docker

on:
  push:
    branches:
      - "master"
      - "*" # TEMPORARY FOR TESTING
    tags:
      - "v*"
  pull_request:
    branches:
      - "master"
      - "*"
  workflow_dispatch:
    inputs:
      ref:
        description: "Tag to build (e.g. v0.1.0)"
        required: true

env:
  ECR_REGION: us-east-2

jobs:
  build-riverui:
    name: "Build image: riverui"
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ github.repository }}
      REGISTRY: ghcr.io
    strategy:
      matrix:
        docker_platform:
          - linux/amd64
          - linux/arm64
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
    permissions:
      attestations: write
      contents: read
      id-token: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: Prepare
        run: |
          platform=${{ matrix.docker_platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.source=https://github.com/riverqueue/riverui
            org.opencontainers.image.description="River UI is a web-based user interface for River, a fast and reliable background job system."
            org.opencontainers.image.licenses=MPL-2.0
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: Build and push to GitHub Container Registry
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          pull: true
          platforms: ${{ matrix.docker_platform }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache,mode=max
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true,annotation-index.org.opencontainers.image.description=River UI

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          push-to-registry: true
          subject-digest: ${{ steps.build.outputs.digest }}
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-oss-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  build-riverproui:
    name: "Build image: riverproui"
    runs-on: ubuntu-latest
    env:
      ECR_ACCOUNT_ID: ${{ secrets.ECR_CACHE_AWS_ACCOUNT_ID }}
      ECR_ROLE_ARN: ${{ secrets.ECR_CACHE_ROLE_ARN }}
      TAG: ${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.pull_request.number) || github.ref_name }}
      SHA_TAG: ${{ format('sha-{0}', github.sha) }}
    strategy:
      matrix:
        docker_platform:
          - linux/amd64
          - linux/arm64
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ECR_ROLE_ARN }}
          aws-region: ${{ env.ECR_REGION }}
          role-session-name: GitHubActions

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Prepare
        run: |
          platform=${{ matrix.docker_platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta for Pro
        id: meta-pro
        uses: docker/metadata-action@v5
        with:
          images: ${{ format('{0}.dkr.ecr.{1}.amazonaws.com/riverqueue/riverproui', env.ECR_ACCOUNT_ID, env.ECR_REGION) }}
          labels: |
            org.opencontainers.image.source=https://github.com/riverqueue/riverui
            org.opencontainers.image.description=River UI Pro is a web-based user interface for River, with pro features.
            org.opencontainers.image.licenses=commercial

      - name: Build & push (by digest)
        id: build-pro
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.pro
          pull: true
          platforms: ${{ matrix.docker_platform }}
          provenance: true
          labels: ${{ steps.meta-pro.outputs.labels }}
          cache-from: ${{ format('type=registry,ref={0}.dkr.ecr.{1}.amazonaws.com/riverqueue/riverproui:cache', env.ECR_ACCOUNT_ID, env.ECR_REGION) }}
          cache-to: ${{ format('type=registry,ref={0}.dkr.ecr.{1}.amazonaws.com/riverqueue/riverproui:cache,mode=max', env.ECR_ACCOUNT_ID, env.ECR_REGION) }}
          outputs: ${{ format('type=image,name={0}.dkr.ecr.{1}.amazonaws.com/riverqueue/riverproui,push-by-digest=true,name-canonical=true,push=true', env.ECR_ACCOUNT_ID, env.ECR_REGION) }}
          secrets: |
            "riverpro_credential=${{ secrets.RIVERPRO_GO_MOD_CREDENTIAL }}"

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build-pro.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: pro-digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge-riverui:
    name: "Merge manifests: riverui"
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ github.repository }}
      REGISTRY: ghcr.io
    needs:
      - build-riverui
    permissions:
      contents: read
      packages: write

    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-oss-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.source=https://github.com/riverqueue/riverui
            org.opencontainers.image.description="River UI is a web-based user interface for River, a fast and reliable background job system."
            org.opencontainers.image.licenses=MPL-2.0
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create \
            --annotation "index:org.opencontainers.image.source=https://github.com/riverqueue/riverui" \
            --annotation "index:org.opencontainers.image.description=River UI is a web-based user interface for River, a fast and reliable background job system." \
            --annotation "index:org.opencontainers.image.licenses=MPL-2.0" \
            $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

  merge-riverproui:
    name: "Merge manifests: riverproui"
    runs-on: ubuntu-latest
    needs:
      - build-riverproui
    permissions:
      contents: read
      id-token: write
      attestations: write
    env:
      ECR_ACCOUNT_ID: ${{ secrets.ECR_CACHE_AWS_ACCOUNT_ID }}
      ECR_ROLE_ARN: ${{ secrets.ECR_CACHE_ROLE_ARN }}
      TAG: ${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.pull_request.number) || github.ref_name }}
      SHA_TAG: ${{ format('sha-{0}', github.sha) }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ECR_ROLE_ARN }}
          aws-region: ${{ env.ECR_REGION }}
          role-session-name: GitHubActions

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: pro-digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Prepare ECR vars
        run: |
          ECR_IMAGE="${ECR_ACCOUNT_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com/riverqueue/riverproui"
          echo "ECR_IMAGE=${ECR_IMAGE}" >> $GITHUB_ENV

      - name: Create & push manifest list ($TAG and $SHA_TAG)
        working-directory: /tmp/digests
        run: |
          set -euo pipefail
          docker buildx imagetools create \
            -t "$ECR_IMAGE:$TAG" \
            $(printf "$ECR_IMAGE@sha256:%s " *)
          docker buildx imagetools create \
            -t "$ECR_IMAGE:$SHA_TAG" \
            $(printf "$ECR_IMAGE@sha256:%s " *)

      - name: Tag latest on release tags only
        if: startsWith(github.ref, 'refs/tags/v')
        working-directory: /tmp/digests
        run: |
          set -euo pipefail
          docker buildx imagetools create \
            -t "$ECR_IMAGE:latest" \
            $(printf "$ECR_IMAGE@sha256:%s " *)

      - name: Compute manifest digest for attestation
        id: manifest-digest
        run: |
          set -euo pipefail
          docker buildx imagetools inspect --raw "$ECR_IMAGE:$TAG" > /tmp/docker-manifest.json
          DIGEST=$(sha256sum /tmp/docker-manifest.json | awk '{print $1}')
          echo "digest=sha256:$DIGEST" >> $GITHUB_OUTPUT

      - name: Generate build provenance attestation (not pushed)
        uses: actions/attest-build-provenance@v1
        with:
          push-to-registry: false
          subject-digest: ${{ steps.manifest-digest.outputs.digest }}
          subject-name: riverqueue.com/riverproui

      - name: Upload attestation manifest JSON
        uses: actions/upload-artifact@v4
        with:
          name: pro-attestation-manifest
          path: /tmp/docker-manifest.json

  prefetch-riverproui-through-live-registry:
    # IMPORTANT: Prefetch only for release semver tags and PRs used for manual testing
    # TODO(bgentry): Remove PR prefetch on PRs before merging to main; keep only v* tags
    name: "Prefetch riverproui via live registry"
    runs-on: ubuntu-latest
    needs:
      - merge-riverproui
    if: github.event_name == 'pull_request' || startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
    env:
      REGISTRY_HOST: ${{ secrets.REGISTRY_HOST }}
      ECR_REPO_RIVERPROUI: riverqueue/riverproui
    steps:
      - name: Install tooling
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Compute TAG
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "TAG=pr-${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          else
            echo "TAG=${{ github.ref_name }}" >> $GITHUB_ENV
          fi
          echo "RUN_KEY=${{ github.run_id }}-${{ github.run_attempt }}" >> $GITHUB_ENV

      - name: Prefetch tag via public /v2 (with retries)
        env:
          RIVERPRO_GO_MOD_CREDENTIAL: ${{ secrets.RIVERPRO_GO_MOD_CREDENTIAL }}
        run: |
          set -euo pipefail
          printf 'river:%s\n' "$RIVERPRO_GO_MOD_CREDENTIAL" | ./scripts/prefetch-registry.sh \
            --registry-host "$REGISTRY_HOST" \
            --repo "$ECR_REPO_RIVERPROUI" \
            --tag "$TAG" \
            --run-key "$RUN_KEY"

      - name: Upload prefetch artifacts
        uses: actions/upload-artifact@v4
        with:
          name: riverproui-${{ env.TAG }}-prefetch-artifacts
          path: |
            index_*
            mf.*
            ref.*

  # verify-riverproui-from-live-registry:
  #   name: "Verify riverproui from live registry"
  #   runs-on: ubuntu-latest
  #   needs:
  #     - prefetch-riverproui-through-live-registry
  #   permissions:
  #     contents: read
  #   env:
  #     REGISTRY_HOST: ${{ secrets.REGISTRY_HOST }}
  #     ECR_REPO_RIVERPROUI: ${{ secrets.ECR_REPO_RIVERPROUI }}
  #   steps:
  #     - name: Compute TAG
  #       run: |
  #         if [ "${{ github.event_name }}" = "pull_request" ]; then
  #           echo "TAG=pr-${{ github.event.pull_request.number }}" >> $GITHUB_ENV
  #         else
  #           echo "TAG=${{ github.ref_name }}" >> $GITHUB_ENV
  #         fi

  #     - name: Login to live registry (riverqueue.com)
  #       env:
  #         RIVERPRO_GO_MOD_CREDENTIAL: ${{ secrets.RIVERPRO_GO_MOD_CREDENTIAL }}
  #       run: |
  #         set -euo pipefail
  #         echo "$RIVERPRO_GO_MOD_CREDENTIAL" | docker login "$REGISTRY_HOST" -u river --password-stdin

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Inspect multi-arch from live registry
  #       run: |
  #         set -euo pipefail
  #         docker buildx imagetools inspect "${REGISTRY_HOST}/${ECR_REPO_RIVERPROUI}:${TAG}" | tee inspect.txt
  #         grep -q 'linux/amd64' inspect.txt
  #         grep -q 'linux/arm64' inspect.txt

  #     - name: Pull image from live registry
  #       run: |
  #         docker pull "${REGISTRY_HOST}/${ECR_REPO_RIVERPROUI}:${TAG}"

  #     - name: Upload inspect output
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: riverproui-${{ env.TAG }}-inspect
  #         path: inspect.txt
