/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root"
import { Route as SettingsRouteImport } from "./routes/settings"
import { Route as QueuesRouteImport } from "./routes/queues"
import { Route as JobsRouteImport } from "./routes/jobs"
import { Route as IndexRouteImport } from "./routes/index"
import { Route as WorkflowsIndexRouteImport } from "./routes/workflows/index"
import { Route as QueuesIndexRouteImport } from "./routes/queues/index"
import { Route as PeriodicJobsIndexRouteImport } from "./routes/periodic-jobs/index"
import { Route as JobsIndexRouteImport } from "./routes/jobs/index"
import { Route as WorkflowsWorkflowIdRouteImport } from "./routes/workflows/$workflowId"
import { Route as QueuesNameRouteImport } from "./routes/queues/$name"
import { Route as JobsJobIdRouteImport } from "./routes/jobs/$jobId"
import { Route as AboutAboutRouteImport } from "./routes/about/about"

const SettingsRoute = SettingsRouteImport.update({
  id: "/settings",
  path: "/settings",
  getParentRoute: () => rootRouteImport,
} as any)
const QueuesRoute = QueuesRouteImport.update({
  id: "/queues",
  path: "/queues",
  getParentRoute: () => rootRouteImport,
} as any)
const JobsRoute = JobsRouteImport.update({
  id: "/jobs",
  path: "/jobs",
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any)
const WorkflowsIndexRoute = WorkflowsIndexRouteImport.update({
  id: "/workflows/",
  path: "/workflows/",
  getParentRoute: () => rootRouteImport,
} as any)
const QueuesIndexRoute = QueuesIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => QueuesRoute,
} as any)
const PeriodicJobsIndexRoute = PeriodicJobsIndexRouteImport.update({
  id: "/periodic-jobs/",
  path: "/periodic-jobs/",
  getParentRoute: () => rootRouteImport,
} as any)
const JobsIndexRoute = JobsIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => JobsRoute,
} as any)
const WorkflowsWorkflowIdRoute = WorkflowsWorkflowIdRouteImport.update({
  id: "/workflows/$workflowId",
  path: "/workflows/$workflowId",
  getParentRoute: () => rootRouteImport,
} as any)
const QueuesNameRoute = QueuesNameRouteImport.update({
  id: "/$name",
  path: "/$name",
  getParentRoute: () => QueuesRoute,
} as any)
const JobsJobIdRoute = JobsJobIdRouteImport.update({
  id: "/$jobId",
  path: "/$jobId",
  getParentRoute: () => JobsRoute,
} as any)
const AboutAboutRoute = AboutAboutRouteImport.update({
  id: "/about/about",
  path: "/about/about",
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute
  "/jobs": typeof JobsRouteWithChildren
  "/queues": typeof QueuesRouteWithChildren
  "/settings": typeof SettingsRoute
  "/about/about": typeof AboutAboutRoute
  "/jobs/$jobId": typeof JobsJobIdRoute
  "/queues/$name": typeof QueuesNameRoute
  "/workflows/$workflowId": typeof WorkflowsWorkflowIdRoute
  "/jobs/": typeof JobsIndexRoute
  "/periodic-jobs": typeof PeriodicJobsIndexRoute
  "/queues/": typeof QueuesIndexRoute
  "/workflows": typeof WorkflowsIndexRoute
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute
  "/settings": typeof SettingsRoute
  "/about/about": typeof AboutAboutRoute
  "/jobs/$jobId": typeof JobsJobIdRoute
  "/queues/$name": typeof QueuesNameRoute
  "/workflows/$workflowId": typeof WorkflowsWorkflowIdRoute
  "/jobs": typeof JobsIndexRoute
  "/periodic-jobs": typeof PeriodicJobsIndexRoute
  "/queues": typeof QueuesIndexRoute
  "/workflows": typeof WorkflowsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  "/": typeof IndexRoute
  "/jobs": typeof JobsRouteWithChildren
  "/queues": typeof QueuesRouteWithChildren
  "/settings": typeof SettingsRoute
  "/about/about": typeof AboutAboutRoute
  "/jobs/$jobId": typeof JobsJobIdRoute
  "/queues/$name": typeof QueuesNameRoute
  "/workflows/$workflowId": typeof WorkflowsWorkflowIdRoute
  "/jobs/": typeof JobsIndexRoute
  "/periodic-jobs/": typeof PeriodicJobsIndexRoute
  "/queues/": typeof QueuesIndexRoute
  "/workflows/": typeof WorkflowsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | "/"
    | "/jobs"
    | "/queues"
    | "/settings"
    | "/about/about"
    | "/jobs/$jobId"
    | "/queues/$name"
    | "/workflows/$workflowId"
    | "/jobs/"
    | "/periodic-jobs"
    | "/queues/"
    | "/workflows"
  fileRoutesByTo: FileRoutesByTo
  to:
    | "/"
    | "/settings"
    | "/about/about"
    | "/jobs/$jobId"
    | "/queues/$name"
    | "/workflows/$workflowId"
    | "/jobs"
    | "/periodic-jobs"
    | "/queues"
    | "/workflows"
  id:
    | "__root__"
    | "/"
    | "/jobs"
    | "/queues"
    | "/settings"
    | "/about/about"
    | "/jobs/$jobId"
    | "/queues/$name"
    | "/workflows/$workflowId"
    | "/jobs/"
    | "/periodic-jobs/"
    | "/queues/"
    | "/workflows/"
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  JobsRoute: typeof JobsRouteWithChildren
  QueuesRoute: typeof QueuesRouteWithChildren
  SettingsRoute: typeof SettingsRoute
  AboutAboutRoute: typeof AboutAboutRoute
  WorkflowsWorkflowIdRoute: typeof WorkflowsWorkflowIdRoute
  PeriodicJobsIndexRoute: typeof PeriodicJobsIndexRoute
  WorkflowsIndexRoute: typeof WorkflowsIndexRoute
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/settings": {
      id: "/settings"
      path: "/settings"
      fullPath: "/settings"
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/queues": {
      id: "/queues"
      path: "/queues"
      fullPath: "/queues"
      preLoaderRoute: typeof QueuesRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/jobs": {
      id: "/jobs"
      path: "/jobs"
      fullPath: "/jobs"
      preLoaderRoute: typeof JobsRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/": {
      id: "/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/workflows/": {
      id: "/workflows/"
      path: "/workflows"
      fullPath: "/workflows"
      preLoaderRoute: typeof WorkflowsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/queues/": {
      id: "/queues/"
      path: "/"
      fullPath: "/queues/"
      preLoaderRoute: typeof QueuesIndexRouteImport
      parentRoute: typeof QueuesRoute
    }
    "/periodic-jobs/": {
      id: "/periodic-jobs/"
      path: "/periodic-jobs"
      fullPath: "/periodic-jobs"
      preLoaderRoute: typeof PeriodicJobsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/jobs/": {
      id: "/jobs/"
      path: "/"
      fullPath: "/jobs/"
      preLoaderRoute: typeof JobsIndexRouteImport
      parentRoute: typeof JobsRoute
    }
    "/workflows/$workflowId": {
      id: "/workflows/$workflowId"
      path: "/workflows/$workflowId"
      fullPath: "/workflows/$workflowId"
      preLoaderRoute: typeof WorkflowsWorkflowIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/queues/$name": {
      id: "/queues/$name"
      path: "/$name"
      fullPath: "/queues/$name"
      preLoaderRoute: typeof QueuesNameRouteImport
      parentRoute: typeof QueuesRoute
    }
    "/jobs/$jobId": {
      id: "/jobs/$jobId"
      path: "/$jobId"
      fullPath: "/jobs/$jobId"
      preLoaderRoute: typeof JobsJobIdRouteImport
      parentRoute: typeof JobsRoute
    }
    "/about/about": {
      id: "/about/about"
      path: "/about/about"
      fullPath: "/about/about"
      preLoaderRoute: typeof AboutAboutRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface JobsRouteChildren {
  JobsJobIdRoute: typeof JobsJobIdRoute
  JobsIndexRoute: typeof JobsIndexRoute
}

const JobsRouteChildren: JobsRouteChildren = {
  JobsJobIdRoute: JobsJobIdRoute,
  JobsIndexRoute: JobsIndexRoute,
}

const JobsRouteWithChildren = JobsRoute._addFileChildren(JobsRouteChildren)

interface QueuesRouteChildren {
  QueuesNameRoute: typeof QueuesNameRoute
  QueuesIndexRoute: typeof QueuesIndexRoute
}

const QueuesRouteChildren: QueuesRouteChildren = {
  QueuesNameRoute: QueuesNameRoute,
  QueuesIndexRoute: QueuesIndexRoute,
}

const QueuesRouteWithChildren =
  QueuesRoute._addFileChildren(QueuesRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  JobsRoute: JobsRouteWithChildren,
  QueuesRoute: QueuesRouteWithChildren,
  SettingsRoute: SettingsRoute,
  AboutAboutRoute: AboutAboutRoute,
  WorkflowsWorkflowIdRoute: WorkflowsWorkflowIdRoute,
  PeriodicJobsIndexRoute: PeriodicJobsIndexRoute,
  WorkflowsIndexRoute: WorkflowsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
