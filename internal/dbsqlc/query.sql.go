// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package dbsqlc

import (
	"context"
)

const jobCountByQueueAndState = `-- name: JobCountByQueueAndState :many
WITH all_queues AS (
  SELECT unnest($1::text[])::text AS queue
),

running_job_counts AS (
  SELECT
    queue,
    COUNT(*) AS count
  FROM
    river_job
  WHERE
    queue = ANY($1::text[]) AND
    state = 'running'
  GROUP BY queue
),

available_job_counts AS (
  SELECT
    queue,
    COUNT(*) AS count
  FROM
    river_job
  WHERE
    queue = ANY($1::text[]) AND
    state = 'available'
  GROUP BY queue
)

SELECT
    all_queues.queue,
    COALESCE(available_job_counts.count, 0) AS count_available,
    COALESCE(running_job_counts.count, 0) AS count_running
FROM
    all_queues
LEFT JOIN
    running_job_counts ON all_queues.queue = running_job_counts.queue
LEFT JOIN
    available_job_counts ON all_queues.queue = available_job_counts.queue
`

type JobCountByQueueAndStateRow struct {
	Queue          string
	CountAvailable int64
	CountRunning   int64
}

func (q *Queries) JobCountByQueueAndState(ctx context.Context, db DBTX, queueNames []string) ([]*JobCountByQueueAndStateRow, error) {
	rows, err := db.Query(ctx, jobCountByQueueAndState, queueNames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*JobCountByQueueAndStateRow
	for rows.Next() {
		var i JobCountByQueueAndStateRow
		if err := rows.Scan(&i.Queue, &i.CountAvailable, &i.CountRunning); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const jobCountByState = `-- name: JobCountByState :many
SELECT state, count(*)
FROM river_job
GROUP BY state
`

type JobCountByStateRow struct {
	State RiverJobState
	Count int64
}

func (q *Queries) JobCountByState(ctx context.Context, db DBTX) ([]*JobCountByStateRow, error) {
	rows, err := db.Query(ctx, jobCountByState)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*JobCountByStateRow
	for rows.Next() {
		var i JobCountByStateRow
		if err := rows.Scan(&i.State, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const jobListWorkflow = `-- name: JobListWorkflow :many
SELECT
  id, state, attempt, max_attempts, attempted_at, created_at, finalized_at, scheduled_at, priority, args, attempted_by, errors, kind, metadata, queue, tags
FROM
  river_job
WHERE
  metadata @> jsonb_build_object('workflow_id', $1::text)
ORDER BY
  id ASC
LIMIT $3::integer
OFFSET $2::bigint
`

type JobListWorkflowParams struct {
	WorkflowID       string
	PaginationOffset int64
	PaginationLimit  int32
}

func (q *Queries) JobListWorkflow(ctx context.Context, db DBTX, arg *JobListWorkflowParams) ([]*RiverJob, error) {
	rows, err := db.Query(ctx, jobListWorkflow, arg.WorkflowID, arg.PaginationOffset, arg.PaginationLimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*RiverJob
	for rows.Next() {
		var i RiverJob
		if err := rows.Scan(
			&i.ID,
			&i.State,
			&i.Attempt,
			&i.MaxAttempts,
			&i.AttemptedAt,
			&i.CreatedAt,
			&i.FinalizedAt,
			&i.ScheduledAt,
			&i.Priority,
			&i.Args,
			&i.AttemptedBy,
			&i.Errors,
			&i.Kind,
			&i.Metadata,
			&i.Queue,
			&i.Tags,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
