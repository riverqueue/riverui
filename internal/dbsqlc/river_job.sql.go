// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: river_job.sql

package dbsqlc

import (
	"context"
)

const jobKindListByPrefix = `-- name: JobKindListByPrefix :many
SELECT DISTINCT ON (kind) kind
FROM river_job
WHERE ($1 = '' OR kind ILIKE $1 || '%')
    AND ($2 = '' OR kind > $2)
    AND ($3::text[] IS NULL OR kind != ALL($3))
ORDER BY kind ASC
LIMIT $4
`

type JobKindListByPrefixParams struct {
	Prefix  interface{}
	After   interface{}
	Exclude []string
	Max     int32
}

func (q *Queries) JobKindListByPrefix(ctx context.Context, db DBTX, arg *JobKindListByPrefixParams) ([]string, error) {
	rows, err := db.Query(ctx, jobKindListByPrefix,
		arg.Prefix,
		arg.After,
		arg.Exclude,
		arg.Max,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var kind string
		if err := rows.Scan(&kind); err != nil {
			return nil, err
		}
		items = append(items, kind)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
